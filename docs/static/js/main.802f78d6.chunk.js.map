{"version":3,"sources":["utils/monitor.tsx","ImageCard.tsx","Square.tsx","Timer.tsx","components/Switch.tsx","App.tsx","utils/lib.tsx","serviceWorker.ts","index.tsx"],"names":["events","on","eventName","fn","this","push","off","i","length","splice","emit","data","forEach","Card","style","index","className","gameStarted","updateRotation","onClick","rotation","transform","data-index","onDragStart","e","dataTransfer","setData","monitor","draggable","isMovePossible","imageData","src","dest","rows","columns","allowedPlaces","Array","fill","map","x","reduce","a","row","column","Math","floor","filter","item","includes","Square","dropHandler","children","React","useState","highLight","setHighLight","currentDragIndex","setCurrentDragIndex","useEffect","event","target","dataset","border","classNames","onDragOver","preventDefault","onDrop","evt","onDragEnd","onDragLeave","pad","val","toString","intervalId","Timer","seconds","setSeconds","minutes","setMinutes","stopTimer","reset","console","log","window","clearInterval","sec","setInterval","startTimer","display","background","borderRadius","padding","marginRight","top","minWidth","position","Switch","props","checked","isOn","onChange","handleToggle","type","id","color","htmlFor","MyCustomSwitch","value","setValue","useStyles","makeStyles","theme","appBar","backgroundColor","title","flex","button","right","Transition","forwardRef","ref","Slide","direction","getImageUrl","imageType","imageUrl","isMobile","innerWidth","App","classes","showRules","setShowRules","selectedImageType","setSelectedImageType","gameWon","setGameWon","setGameStarted","scaleView","_setScaleView","hardMode","positions","setPositions","rotatedPos","setRotatedPos","imageError","setImageError","_shuffledPos","setShuffledPos","width","height","squareSide","_setImageData","setImageUrl","correctMoves","setCorrectMoves","dialogOpen","setDialogOpen","loadImage","handleClose","openDialog","updatePosition","from","to","shuffledPos","temp","status","gameStatus","imageSrc","loader","document","getElementById","classList","remove","image","Image","onload","obj","getHardPositions","existingImage","body","removeChild","add","onerror","div","createElement","setAttribute","append","prepend","squareArea","pow","sqrt","y","suffle","_positions","pos","random","array","j","shuffleArray","slice","startGame","newPositions","won","setScaleView","sign","zoom","containterWidth","containterHeight","imagePositions","tempArr","imgagePositionsMatrix","ind","placeholder","disabled","selected","marginBottom","marginLeft","paddingLeft","margin","transformOrigin","rindex","flexWrap","xPos","yPos","renderImageSpans","textDecoration","listStyle","href","Dialog","fullWidth","open","onClose","TransitionComponent","AppBar","Toolbar","Typography","variant","Button","autoFocus","List","ListItem","ListItemText","primary","secondary","Divider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.802f78d6.chunk.js","sourcesContent":["export default {\n    events: {},\n    on: function (eventName: string, fn: (event) => void) {\n      this.events[eventName] = this.events[eventName] || [];\n      this.events[eventName].push(fn);\n    },\n    off: function(eventName: string, fn: () => void) {\n      if (this.events[eventName]) {\n        for (var i = 0; i < this.events[eventName].length; i++) {\n          if (this.events[eventName][i] === fn) {\n            this.events[eventName].splice(i, 1);\n            break;\n          }\n        };\n      }\n    },\n    emit: function (eventName: string, data:any) {\n      if (this.events[eventName]) {\n        this.events[eventName].forEach(function(fn: (d: any) => {}) {\n          fn(data);\n        });\n      }\n    }\n  };","import React from 'react';\nimport monitor from \"./utils/monitor\";\ntype CardProps = {\n  gameStarted: boolean,\n  updateRotation: (a: number, b: number) => void,\n  style: any,\n  index: number,\n};\n\nconst Card = ({ style, index, className, gameStarted, updateRotation }) => {\n  const onDragStart = (e) => {\n    e.dataTransfer.setData('id', 'card'); // without this on Firefox drag and drop fails\n    if (!gameStarted) return;\n    monitor.emit('dragInProgress', e);\n  }\n\n  const rotateImage = () => {\n    if (!gameStarted) return;\n    let rotation = style.rotation;\n    rotation += 1;\n    updateRotation(index, rotation % 4)\n  };\n\n  return (<div onClick={rotateImage} style={{ ...style, transform: `rotate(${style.rotation * 90}deg)` }} data-index={index} key={index} className={className}\n    onDragStart={(e) => onDragStart(e)}\n    draggable\n  >\n    <div className='overlay' />\n  </div>);\n}\nexport default Card;","import React from 'react';\nimport monitor from './utils/monitor';\n\nconst isMovePossible = (imageData, src, dest) => {\n  const rows = imageData.rows, columns = imageData.columns;\n\n  const getMoveablePositions = (i, row, column) => {\n    const validXY = [[row - 1, column - 1], [row - 1, column], [row - 1, column + 1], [row, column - 1], [row, column + 1], [row + 1, column - 1], [row + 1, column], [row + 1, column + 1]].filter(item => {\n      return (item[0] >= 0 && item[1] >= 0 && item[0] <= rows - 1 && item[1] <= columns - 1)\n    });\n    return validXY.map(item => {\n      return item[0] * columns + item[1];\n    });\n  }\n  const allowedPos = Array(rows * columns).fill(0, 0, rows * columns).map((x, i) => i).reduce((a, i) => {\n    a[i] = getMoveablePositions(i, Math.floor(i / columns), i % columns);\n    return a;\n  }, {});\n\n  const allowedPlaces = allowedPos[src];\n  return allowedPlaces && allowedPlaces.includes(dest);\n}\n\nconst Square = ({ imageData, index, dropHandler, style, children }) => {\n  const [highLight, setHighLight] = React.useState(false);\n  const [currentDragIndex, setCurrentDragIndex] = React.useState(-1);\n\n  React.useEffect(() => {\n    monitor.on('dragInProgress', (event) => {\n      setCurrentDragIndex(event.target.dataset.index);\n      if (isMovePossible(imageData, event.target.dataset.index, index)) {\n        setHighLight(true);\n      }\n    });\n\n    monitor.on('dropFinish', (data) => {\n      setCurrentDragIndex(-1);\n      setHighLight(false);\n    });\n\n  }, []);\n\n\n  const onDrop = (evt) => {\n    monitor.emit('dropFinish', evt);\n    setCurrentDragIndex(-1);\n    setHighLight(false);\n\n    if (isMovePossible(imageData, currentDragIndex, index)) {\n      dropHandler(currentDragIndex, index);\n    }\n  }\n\n  const onDragOver = (e) => {\n    e.preventDefault();\n  }\n\n  const onDragEnd = (e) => {\n    e.preventDefault();\n    setHighLight(false);\n  }\n\n  const onDragEnter = (e) => {\n    e.preventDefault();\n  }\n\n  const onDragLeave = (e) => {\n    e.preventDefault();\n    setHighLight(false);\n\n    if (isMovePossible(imageData, e.target.dataset.index, index)) {\n      setHighLight(false);\n    }\n  }\n\n  const border = highLight ? '1px solid green' : '1px solid gray';\n  const zoom = highLight ? '95%' : '100%';\n  let classNames = currentDragIndex == index ? 'current-drag' : '';\n  if (highLight) {\n    classNames = `highlight ${classNames}`;\n  }\n\n  return (\n    <div style={{ ...style, border }}\n      className={classNames}\n      // index={this.props.index}\n      onDragOver={(e) => onDragOver(e)}\n      onDrop={(e) => onDrop(e)}\n      onDragEnd={(e) => onDragEnd(e)}\n      onDragLeave={(e) => onDragLeave(e)}>\n      {children}\n    </div>\n  );\n}\n\nexport default Square;","import React from 'react';\nimport monitor from './utils/monitor';\n\nfunction pad(val: number) { return val > 9 ? val.toString() : \"0\" + val; }\n\nlet intervalId = 0;\nconst Timer = () => {\n  const [seconds, setSeconds] = React.useState(\"00\");\n  const [minutes, setMinutes] = React.useState(\"00\");\n\n  const startTimer = () => {\n    let sec = 0;\n    intervalId = window.setInterval(() => {\n      setSeconds(pad(++sec % 60));\n      setMinutes(pad(Math.floor(sec / 60)));\n    }, 1000);\n  }\n\n  const stopTimer = (reset = false) => {\n    console.log('reset, ', reset, intervalId);\n    if (intervalId) {\n      window.clearInterval(intervalId);\n      if (reset) {\n        setSeconds('00');\n        setMinutes('00');\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    monitor.on('gameStarted', () => {\n      startTimer();\n    });\n\n    monitor.on('gameWon', () => {\n      stopTimer();\n    });\n    monitor.on('gameResetted', () => {\n      stopTimer(true);\n    });\n  }, []);\n\n  return (<div style={{\n    display: 'inline-block', background: 'white',\n    border: '1px solid gray', borderRadius: '5px',\n    padding: '2px', marginRight: '10px',\n    top: '2px',\n    minWidth: '50px',\n    position: 'relative'\n  }}>\n    <span>{minutes}:</span>\n    <span>{seconds}</span>\n  </div>);\n}\nexport default Timer;","import React, {useState} from \"react\";\n\nconst Switch = (props:any) => {\n    return (\n      <>\n        <input\n          checked={props.isOn}\n          onChange={props.handleToggle}\n          className=\"switch-checkbox\"\n          type=\"checkbox\"\n          id=\"switch-button\"\n        />\n        <label\n          style={{ background: props.isOn && props.color }}\n          className=\"switch-label\"\n          htmlFor={`switch-button`}\n        >\n          <span className={`switch-button`} />\n        </label>\n      </>\n    );\n  };\n\n  const MyCustomSwitch = (props:any) => {\n    const [value, setValue] = useState(false);\n    return (\n        <Switch\n        isOn={value}\n        color=\"green\"\n        handleToggle={() => {\n            setValue(!value)\n            props.onChange(!value);\n        }\n        }\n      />\n    )\n  };\n\n  export {\n      MyCustomSwitch\n  }","import './App.css';\nimport React from 'react';\nimport Card from './ImageCard';\nimport Square from \"./Square\";\nimport Timer from \"./Timer\";\nimport monitor from \"./utils/monitor\";\nimport { shuffleArray } from \"./utils/lib\";\nimport logo from \"./logo.png\";\nimport { MyCustomSwitch } from \"./components/Switch\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\ntype Position = {\n  x: number,\n  y: number,\n  index: number,\n  squareSide: number,\n  rotation?: number\n};\n\n\ntype ImageData = {\n  width: number,\n  height: number,\n  rows: number,\n  columns: number,\n  squareSide: number\n}\n\ntype MyState = {\n  imageData: ImageData;\n  imageUrl: string,\n  shuffledPos: Array<Position>;\n  rotatedPos?: Array<Position>;\n  hardMode: boolean,\n  gameStarted: boolean;\n  imageError: boolean;\n  positions: Array<Position>,\n  scaleView: number\n  gameWon: boolean,\n  selectedImageType: string,\n  correctMoves: number,\n  showRules: boolean,\n  dialogOpen: boolean\n};\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: 'relative',\n    backgroundColor: 'lightsalmon',\n    color: 'white'\n  },\n  title: {\n    flex: 1,\n  },\n  button: {\n    position: 'absolute',\n    right: '5px'\n  }\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  // @ts-ignore \n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst getImageUrl = (imageType) => {\n  let imageUrl;\n  const isMobile = window.innerWidth <= 400;\n  switch (imageType) {\n    case 'animal': {\n      imageUrl = `https://raw.githubusercontent.com/tukuna30/images/master/camels${isMobile ? '_mobile' : ''}.png`;\n      break;\n    }\n    case 'scenic': {\n      imageUrl = `https://raw.githubusercontent.com/tukuna30/images/master/animal${isMobile ? '_mobile' : ''}.png`;\n      break;\n    }\n    case 'nature': {\n      imageUrl = `https://raw.githubusercontent.com/tukuna30/images/master/scenic${isMobile ? '_mobile' : ''}.png`;\n      break;\n    }\n    case 'greenery': {\n      imageUrl = `https://raw.githubusercontent.com/tukuna30/images/master/garden${isMobile ? '_mobile' : ''}.png`\n      break;\n    }\n    // case 'easy': {\n    //   imageUrl = `https://raw.githubusercontent.com/tukuna30/images/master/abcd${isMobile ? '_mobile' : ''}.png`\n    // }\n  }\n  return imageUrl;\n}\n\nconst App = () => {\n  const classes = useStyles();\n\n  const [showRules, setShowRules] = React.useState(false);\n  const [selectedImageType, setSelectedImageType] = React.useState('nature');\n  const [gameWon, setGameWon] = React.useState(false);\n  const [gameStarted, setGameStarted] = React.useState(false);\n  const [scaleView, _setScaleView] = React.useState(1);\n  const [hardMode, _setHardMode] = React.useState(true);\n  const [positions, setPositions] = React.useState<Position[]>([]);\n  const [rotatedPos, setRotatedPos] = React.useState<Position[]>([]);\n  const [imageError, setImageError] = React.useState(false);\n  const [_shuffledPos, setShuffledPos] = React.useState<Position[]>([]);\n  const [imageData, _setImageData] = React.useState({ width: 0, height: 0, squareSide: 1, rows: 1, columns: 1 });\n  const [imageUrl, setImageUrl] = React.useState(getImageUrl('nature'));\n  const [correctMoves, setCorrectMoves] = React.useState(0);\n  const [dialogOpen, setDialogOpen] = React.useState(true);\n\n  React.useEffect(() => {\n    loadImage(imageUrl);\n  }, []);\n\n  const handleClose = () => {\n    openDialog(false);\n  };\n\n  const openDialog = (value) => {\n    setDialogOpen(value);\n  }\n\n  const setImageData = (width, height) => {\n    const obj = getHardPositions(width, height);\n    const positions = obj.positions;\n    setTimeout(() => {\n      suffle(positions);\n      _setImageData({ width, height, rows: obj.rows, columns: obj.columns, squareSide: obj.squareSide });\n      setPositions(positions as any);\n      setImageError(false);\n    }, 50);\n  }\n\n  const updatePosition = (from, to) => {\n    if (!_shuffledPos.length || !gameStarted) {\n      return;\n    }\n\n    console.log('suffledpos', _shuffledPos);\n\n    const shuffledPos = [..._shuffledPos];\n    const temp = shuffledPos[from];\n    shuffledPos[from] = shuffledPos[to];\n    shuffledPos[to] = temp;\n    const status = gameStatus(shuffledPos);\n    setShuffledPos(shuffledPos);\n    setGameStarted(!status.gameWon);\n    setGameWon(status.gameWon);\n    setCorrectMoves(status.correctMoves);\n\n    console.log(status, 'status');\n    if (status.gameWon) {\n      monitor.emit('gameWon', {});\n    }\n  }\n\n  const updateRotation = (index, value) => {\n    if (!hardMode) return;\n    const shuffledPos = [..._shuffledPos];\n    shuffledPos[index].rotation = value;\n    const status = gameStatus(shuffledPos);\n\n    setShuffledPos(shuffledPos);\n    setGameStarted(!status.gameWon);\n    setGameWon(status.gameWon);\n    setCorrectMoves(status.correctMoves);\n\n    if (status.gameWon) {\n      monitor.emit('gameWon', {});\n    }\n  }\n\n  const loadImage = (imageSrc) => {\n    const loader = document.getElementById('loader-container');\n    loader && loader.classList.remove('hide');\n\n    let image = new Image();\n    image.src = imageSrc;\n    image.onload = (event) => {\n      const obj = getHardPositions(image.width, image.height);\n      const positions = obj.positions;\n      //this.suffle(positions);\n      _setImageData({ width: image.width, height: image.height, rows: obj.rows, columns: obj.columns, squareSide: obj.squareSide });\n      setPositions(positions);\n      setImageError(false);\n\n      //remove the image from dom\n      const existingImage = document.getElementById('hidden-image-container');\n      existingImage && document.body.removeChild(existingImage);\n      loader && loader.classList.add('hide');\n    }\n\n    image.onerror = () => {\n      setImageError(true);\n      loader && loader.classList.add('hide');\n    }\n\n    const div = document.createElement('div');\n    div.setAttribute('id', 'hidden-image-container');\n    div.setAttribute('style', \"display: none\")\n    const existingImage = document.getElementById('hidden-image-container');\n    existingImage && document.body.removeChild(existingImage);\n\n    div.append(image);\n    document.body.prepend(div);\n  }\n\n  const getHardPositions = (width, height) => {\n    const positions: Array<Position> = [];\n    const cardSize = 7;\n    const totalArea = width * height;\n    const squareArea = totalArea / (Math.pow(cardSize, 2));\n    const squareSide = Math.floor(Math.sqrt(squareArea));\n    let columns = Math.floor(width / squareSide);\n    let rows = Math.floor(height / squareSide);\n    columns = columns - 1;\n    rows = rows - 1;\n\n    Array(rows).fill(0, 0, rows).map((x, i) => i).forEach((y) => {\n      return Array(columns).fill(0, 0, columns).map((x, i) => i).forEach((x) => {\n        positions.push({ x: -(x + 1) * squareSide, y: -(y + 1) * squareSide, index: (rows * y) + x, squareSide });\n      });\n    });\n    return { positions, rows, columns, squareSide };\n  }\n\n  const setHardMode = () => {\n    if (gameStarted) return;\n    _setHardMode(!hardMode);\n  }\n\n  const playAgain = () => {\n    startGame();\n  }\n\n  const suffle = (_positions?) => {\n    let rotatedPos = _positions || positions;\n    if (hardMode) {\n      rotatedPos = rotatedPos.map((pos) => {\n        return { ...pos, rotation: Math.floor(Math.random() * 4) };\n      });\n\n      setRotatedPos(rotatedPos);\n    }\n\n    const shuffledPos = shuffleArray(rotatedPos.slice());\n    setShuffledPos(shuffledPos);\n  }\n\n  const startGame = () => {\n    if (gameStarted) {\n      return;\n    }\n\n    suffle([...positions]);\n    setGameStarted(true);\n    setGameWon(false);\n\n    monitor.emit('gameStarted', null);\n  }\n\n  const reset = () => {\n    monitor.emit('gameResetted', null);\n\n    setPositions([...positions]);\n    //suffle(); only suffle in hard mode \n    setGameStarted(false);\n    setGameWon(false);\n    _setScaleView(1);\n  }\n\n  const gameStatus = (newPositions) => {\n    let correctMoves = 0;\n    let won = true;\n\n    if (_shuffledPos.length) {\n      console.log('rotated', rotatedPos);\n      (rotatedPos || positions).forEach((pos, index) => {\n        const correctPos = (pos.x === newPositions[index].x &&\n          pos.y === newPositions[index].y &&\n          newPositions[index].rotation === 0);\n\n        if (correctPos) {\n          correctMoves += 1;\n        } else {\n          won = false;\n        }\n      });\n      return { gameWon: won, correctMoves };\n    }\n\n    return { gameWon: false, correctMoves };\n  }\n\n  const setScaleView = (sign = '+') => {\n    const zoom = sign === '+' ? 10 : -10;\n    if (sign === '-' && scaleView < .5 || sign === '+' && scaleView > 1.5) {\n      return;\n    }\n    _setScaleView(scaleView * (100 + zoom) / 100);\n  }\n\n  const renderImageSpans = (pos, index) => {\n    const xPos = pos.x;\n    const yPos = pos.y;\n    const squareSide = pos.squareSide;\n    const style = { background: `url(\"${imageUrl}\") ${xPos}px ${yPos}px no-repeat`, width: `${squareSide}px`, height: `${squareSide}px`, rotation: pos.rotation || 0 };\n\n    return <Square imageData={imageData} index={index} key={`c${index}`} dropHandler={updatePosition} style={{ width: style.width, height: style.height, border: '1px solid gray' }}>\n      <Card updateRotation={updateRotation} gameStarted={gameStarted} style={style} key={index} index={index} className=\"image\" /></Square>;\n  }\n\n  const toggleRulesView = () => {\n    setShowRules(!showRules)\n  }\n\n  const handleImageTypeChange = (event) => {\n    if (gameStarted) {\n      return;\n    }\n    const imageType = event.target.value;\n    const imageUrl = getImageUrl(imageType);\n    loadImage(imageUrl);\n    setSelectedImageType(event.target.value);\n    setImageUrl(imageUrl);\n  }\n\n  if (imageError) {\n    return <div>Failed to load image!</div>;\n  }\n\n  if (!imageData.width) {\n    return null;\n  }\n\n  const containterWidth = imageData.squareSide * imageData.columns + 2 * imageData.columns; //`${imageData.width + 12}px`\n  const containterHeight = imageData.squareSide * imageData.rows + 2 * imageData.rows; // `${imageData.height + 8}px`\n  let imagePositions: Array<Position> = [];\n\n  if (_shuffledPos.length) {\n    imagePositions = _shuffledPos;\n  } else if (rotatedPos && rotatedPos.length) {\n    imagePositions = [...rotatedPos];\n  } else {\n    imagePositions = [...positions];\n  };\n\n  if (!gameStarted) {\n    imagePositions = [...positions];\n  }\n\n  let tempArr: Array<Position> = [], imgagePositionsMatrix: Array<Array<Position>> = [];\n  imagePositions.forEach((item, ind) => {\n    tempArr.push(item);\n    if (ind % imageData.columns === imageData.columns - 1) {\n      imgagePositionsMatrix.push(tempArr);\n      tempArr = [];\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <div className={_shuffledPos.length ? 'started' : ''} style={{ background: 'lightsalmon' }}>\n        <div className='container'>\n          <div className=\"wave\">\n            <div></div>\n            {/* <label style={{margin: '2px', color: 'white', position: 'absolute', left: 0}}><input checked={hardMode} type=\"checkbox\" style={{marginRight: '10px'}} disabled onClick={this.setHardMode}/>Hard mode enabled (Click on the cards to align properly)</label> */}\n            <div className=\"button-container\">\n              <select placeholder=\"Pick image:\" style={{ borderRadius: '5px', marginRight: '10px', height: '24px' }} value={selectedImageType} onChange={handleImageTypeChange}>\n                <option value=\"\" disabled>Pick image</option>\n                <option value=\"scenic\">Scenic</option>\n                <option value=\"animal\">Animal</option>\n                <option value=\"nature\">Nature</option>\n                {/* <option value=\"easy\">Easy</option> */}\n                <option selected value=\"greenery\">Greenery</option>\n              </select>\n              <button onClick={startGame}>Start Game</button>\n              <button style={{ marginBottom: '10px' }} onClick={reset}>Reset Game</button>\n              <Timer />\n              <div className=\"zoom-buttons\">\n                <button onClick={() => setScaleView('-')}>-</button>\n                <span style={{ color: \"black\", marginRight: '4px', marginLeft: '3px' }}>Zoom</span>\n                <button onClick={() => setScaleView()}>+</button>\n              </div>\n              <span style={{ marginRight: '10px', color: 'white' }}>Rules</span>\n              <MyCustomSwitch style={{ marginLeft: '5px' }} onChange={toggleRulesView} />\n              {gameWon && <div style={{ color: 'white', marginLeft: '10px' }}><span>Congratulations!!! You've won.</span>\n                <button onClick={playAgain}>Play again</button>\n              </div>}\n            </div>\n          </div>\n        </div>\n        <div className='mid-section' style={{ paddingLeft: '20px' }}>\n          <div style={{ width: containterWidth, height: containterHeight, margin: '20px 0', transform: `scale(${scaleView})`, transformOrigin: 'left top' }} className={`image-container ${(scaleView !== 100) ? 'zoom' : ''}`}>\n            {(gameStarted || gameWon) && <div className='progress'>\n              <span style={{ width: `${correctMoves / positions.length * 100}%` }} />\n            </div>\n            }\n            {\n              imgagePositionsMatrix.map((row, rindex) => {\n                return (<div className=\"grid\">\n                  <div style={{ display: 'flex', flexWrap: 'nowrap' }}>\n                    {\n                      row.map((pos, index) => {\n                        return renderImageSpans(pos, rindex * imageData.columns + index);\n                      })\n                    }\n                  </div>\n                </div>)\n              })\n            }\n          </div>\n          {showRules && <div className='rules'>\n            <span style={{ textDecoration: 'underline' }}>How to play</span>\n            <ul style={{ listStyle: 'none' }}>\n              <li>After starting the game, click on the cards to rotate and adjust properly.</li>\n              <li>Drag a card and see allowed drop zones.</li>\n              <li>Exchange positions by dropping the card.</li>\n              <li>Check the progress bar!</li>\n              <li>Use zoom +/- feature to increase/reduce image sizes.</li>\n            </ul>\n          </div>\n          }\n        </div>\n        <div className='container bottom'>\n          <div className=\"wave bottom\">\n            <div className=\"button-container bottom\">\n              <span><a style={{ color: 'white', textDecoration: 'none' }} href=\"mailto:tukuna.patro@gmail.com?subject=Suggestions\">Have any suggestions?</a></span>\n              <div>\n                <span style={{ color: 'white' }}>Jigsaw game by Tukuna Patro</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/*\n // @ts-ignore */}\n      <Dialog fullWidth open={dialogOpen} onClose={handleClose} TransitionComponent={Transition}>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              Welcome to JigsawGame\n            </Typography>\n            <Button autoFocus color=\"inherit\" className={classes.button} onClick={handleClose}>\n              <CloseIcon />\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <List>\n          <ListItem button>\n            <ListItemText primary=\"Play and learn\" secondary=\"Computer programming\" />\n          </ListItem>\n          <Divider />\n          <ListItem button>\n            <ListItemText primary=\"JavaScript, HTML, CSS\" secondary=\"ReactJS\" />\n          </ListItem>\n        </List>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default App;\n","function shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\nexport {\n    shuffleArray\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// window.oncontextmenu = (e) => {\n//   e.preventDefault();\n// }\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}